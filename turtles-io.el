;;; turtles-io.el --- Socket communication between Emacs processes -*- lexical-binding: t -*-

;; Copyright (C) 2024 Stephane Zermatten

;; This program is free software: you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 3 of the
;; License, or (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see
;; `http://www.gnu.org/licenses/'.

;;; Commentary:
;;
;; This package defines some basic socket-based communication
;; mechanism between two Emacs instance based on printing and reading
;; elisp objects.
;;

;;; Code:
(require 'cl-lib)

(cl-defstruct (turtles-io-server
               (:constructor turtles-io--make-server)
               (:copier nil))
  "A server created by `turtles-io-server'"

  (proc nil :documentation "The network process used by the server")
  (clients nil :documentation "List of connected clients")
  (on-new-client nil :documentation "Function called when a new client connects")
  (socket nil :read-only t :documentation "Path to the unix socket file used by the server"))

(defvar-local turtles-io--marker nil
  "Marker used in `turtles-io--connection-filter' for reading object.")

(defun turtles-io-server (socket handler &optional on-new-client)
  "Create a new server.

SOCKET is the path at which the server must create a Unix socket.
This can be accessed later using `turtles-io-server-socket'.

HANDLER is a function that'll receive messages from clients. It
should takes arguments, a client process and an elisp object.

ON-NEW-CLIENT, if non-nil, is a function that'll be called
whenever a new client connect. It takes a single argument, the
client process. This can be accessed and modified later using
`turtles-io-server-on-new-client'.

Return an instance of type `turtles-io-server'."
  (let* ((server (turtles-io--make-server
                  :on-new-client on-new-client :socket socket))
         (proc (make-network-process
                 :name " *turtles-io-server*"
                 :family 'local
                 :service socket
                 :server t
                 :noquery t
                 :stop t
                 :sentinel (lambda (proc _msg)
                             (turtles-io--server-sentinel server proc))
                 :filter (lambda (proc string)
                           (turtles-io--connection-filter proc string handler))
                 :plist `(turtles-io-server ,server))))
    (setf (turtles-io-server-proc server) proc)
    (continue-process proc)

    server))

(defun turtles-io-connect (socket handler)
  "Connect to a remote server listening at SOCKET.

HANDLER is a function that'll receive messages from the server.
It should takes arguments, a process and an elisp object.

Return the network process."
  (let ((buf (generate-new-buffer " *turtles-io-client*" t)))
    (make-network-process
     :name (buffer-name buf)
     :buffer buf
     :family 'local
     :service socket
     :server nil
     :noquery t
     :sentinel #'ignore
     :filter (lambda (proc string)
               (turtles-io--connection-filter proc string handler)))))

(defun turtles-io-send (proc-or-server msg)
  "Send MSG to PROC-OR-SERVER.

PROC-OR-SERVER might be a process to send the message to, gotten
from `turtles-io-connect' or `turtles-io-server-clients'.

PROC-OR-SERVER might also be a server, created with
`turtles-io-server', in which case the message is sent to all
clients (or not sent at all if there are no clients.)

MSG can be any lisp object that can be printed."
  (unless (and (turtles-io-server-p proc-or-server)
             (null (turtles-io-server-clients proc-or-server)))
    (with-temp-buffer
      (prin1 msg (current-buffer) t)
      (insert "\n\"\"\"\n")
      ;; """ will not appear in a stream generated by prin1.

      (dolist (proc (if (turtles-io-server-p proc-or-server)
                        (turtles-io-server-clients proc-or-server)
                      (list proc-or-server)))
        (process-send-string proc (buffer-string))))))

(defun turtles-io--server-sentinel (server proc)
  "Process sentinel for server connections"
  ;; New connection
  (when (and (eq (process-status proc) 'open)
             (not (process-contact proc :server)))
    (push proc (turtles-io-server-clients server))
    (set-process-query-on-exit-flag proc nil)
    (when-let ((f (turtles-io-server-on-new-client server)))
      (funcall f proc)))

  (when (eq (process-status proc) 'closed)
    (if (process-contact proc :server)
        ;; Server stopped
        (ignore-errors
          (delete-file (turtles-io-server-socket server)))
      ;; Client connection closed
      (setf (turtles-io-server-clients server)
            (delq proc (turtles-io-server-clients server))))))

(defun turtles-io--connection-filter (proc string handler)
  (insert string)

  (when (save-excursion
          (search-backward "\"\"\"\n" nil 'noerror))
    (let ((end (match-end 0)))
      (unless (and (boundp 'turtles-io--marker) turtles-io--marker)
        (setq-local turtles-io--marker (copy-marker (point-min))))
      (unwind-protect
          (funcall handler proc (read turtles-io--marker))

        ;; Consume the region up to """ whether processing it
        ;; succeeded or not.
        (delete-region (point-min) end)))))


(defun turtles-io-wait-for (timeout error-message predicate)
  "Wait for up to TIMEOUT seconds for PREDICATE to become non-nil.

Fails with ERROR-MESSAGE if it times out."
  (let ((start (current-time)) remaining)
    (while (and (< (setq remaining (time-to-seconds (time-subtract (current-time) start))) timeout)
                (not (funcall predicate)))
      (accept-process-output nil remaining)))
  (unless (funcall predicate)
    (error (concat error-message))))

(provide 'turtles-io)

;;; turtles-io.el ends here
